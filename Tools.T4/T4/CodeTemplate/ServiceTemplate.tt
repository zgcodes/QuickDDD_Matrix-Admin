<#+
// <copyright file="ServiceTemplate.tt" company="Microsoft">
//  Copyright © Microsoft. All Rights Reserved.
// </copyright>
//模板定义类
public class ServiceTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public ServiceTemplate(T4ModelInfo model)
    {
        _model = model;
    }

     /// <summary>
    /// 获生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Service.cs", _model.Name);
        }
    }

	public override string TransformText()
	{
		base.TransformText();
#>
using Quick.Domain;
using Quick.Framework.Tool;
using Quick.Repositories;
using System.Collections.Generic;
using System.Linq;
using System;

namespace Quick.Application
{
	public class <#= _model.Name #>Service : I<#= _model.Name #>Service
	{
        private readonly I<#= _model.Name #>Repository _<#= _model.Name.ToLower() #>Repository;
		
        public <#= _model.Name #>Service(I<#= _model.Name #>Repository <#= _model.Name.ToLower() #>Repository)
        {
            _<#= _model.Name.ToLower() #>Repository = <#= _model.Name.ToLower() #>Repository;
        }

        public QueryRequestOut<<#=_model.Name#>Item> GetAll(<#=_model.Name#>QueryInput input)
        {
            return _<#= _model.Name.ToLower() #>Repository.GetAll()
                .WhereIf(!input.Keywords.IsNullOrWhiteSpace(),m=>m.Name.Contains(input.Keywords))
                .ToOutPut<<#=_model.Name#>Item>(input);
        }

        public <#=_model.Name#>Dto GetById(int id)
        {
            var entity = _<#= _model.Name.ToLower() #>Repository.GetById(id);
            return entity.MapTo<<#=_model.Name#>Dto>();
        }

        public void Create(<#=_model.Name#>Dto model)
        {
            _<#= _model.Name.ToLower() #>Repository.Insert(model.MapTo<<#=_model.Name#>>());
        }

        public void Update(<#=_model.Name#>Dto model)
        {
            var entity = _<#= _model.Name.ToLower() #>Repository.GetById(model.Id);
            _<#= _model.Name.ToLower() #>Repository.Update(model.MapTo(entity));
        }

        public void Delete(int id)
        {
            _<#= _model.Name.ToLower() #>Repository.Delete(id);
        }

	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
